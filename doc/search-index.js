var searchIndex = JSON.parse('{\
"matrix_math":{"doc":"This crate provides Matrix struct for math caculation, …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Matrix","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_vec","from_vec_vec","index","index_mut","into","mul","mul","new","to_owned","try_from","try_into","type_id"],"q":["matrix_math","","","","","","","","","","","","","","","","","","",""],"d":["Only rectangle Matrices are supported.   ","","","","","","","Returns the argument unchanged.","Create a new Matrix with the given dimensions and initial …","Create a new Matrix with the given initial values and …","","","Calls <code>U::from(self)</code>.","","","Create a new Matrix with the given dimensions and initial …","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,1],[[]],[[1,1],2],[[1,3],4],[[]],[[[6,[5]],7,7],1],[[[6,[[6,[5]]]]],1],[1,5],[1,5],[[]],[[1,1],[[9,[1,8]]]],[[1,5],1],[[7,7,5],1],[[]],[[],9],[[],9],[[],10]],"p":[[3,"Matrix"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"f32"],[3,"Vec"],[15,"usize"],[15,"str"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
